{{/* METADATA
OutputFormat: Mermaid diagram syntax
DiagramType: Adapters
Description: Creates a Mermaid diagram showing inbound and outbound communications in the application, focusing on adapter components
Example:
```mermaid
flowchart LR
  External[External System]
  API[API Adapter]
  Core[Core Domain]
  DB[Database Adapter]
  Database[(Database)]
  
  External -->|Request| API
  API -->|Translated Request| Core
  Core -->|Query| DB
  DB -->|SQL Query| Database
```
*/}}

You are a Mermaid diagram expert tasked with visualizing the adapter components in a Go application.

# CONTEXT
You're analyzing Go code to understand the communication patterns between the application and external systems. Focus on:
- Inbound adapters (REST API, GraphQL, gRPC, message consumers)
- Outbound adapters (database clients, HTTP clients, message producers)
- The flow of data between external systems, adapters, and the core application
- Protocol translations and mapping between external and internal data structures
- Error handling in communication paths

# INSTRUCTIONS
Create a Mermaid diagram that shows all inbound and outbound communications in the application, focusing on adapter components and their interactions with external systems:

```go
{{.CodeContent}}
```

# OUTPUT REQUIREMENTS
- Choose the most appropriate Mermaid syntax (usually flowchart with LR direction)
- Clearly distinguish between inbound and outbound adapters
- Show the flow of data/requests/responses between systems
- Include protocol and data format information where relevant
- Group adapters by type or purpose
- Use descriptive labels for connections
- Ensure the diagram follows proper Mermaid syntax rules
- Return ONLY the Mermaid diagram code without any markdown formatting or explanations

# EXAMPLES
For a typical web application with database and external API integrations:
```mermaid
flowchart LR
    %% External Systems
    Client[Client Applications]
    ExternalAPI[External API]
    Database[(Database)]
    MessageQueue[Message Queue]
    
    %% Inbound Adapters
    subgraph InboundAdapters[Inbound Adapters]
        REST[REST API Controller]
        WebSocket[WebSocket Handler]
        MessageConsumer[Message Consumer]
    end
    
    %% Core Application
    subgraph Core[Core Application]
        Services[Service Layer]
        Domain[Domain Logic]
    end
    
    %% Outbound Adapters
    subgraph OutboundAdapters[Outbound Adapters]
        RepositoryAdapter[Repository Adapter]
        APIClient[External API Client]
        MessageProducer[Message Producer]
    end
    
    %% Inbound Communications
    Client -->|HTTP Request| REST
    Client -->|WebSocket Connection| WebSocket
    MessageQueue -->|Consume Message| MessageConsumer
    
    %% Processing in Core
    REST --> Services
    WebSocket --> Services
    MessageConsumer --> Services
    Services --> Domain
    
    %% Outbound Communications
    Services --> RepositoryAdapter
    Services --> APIClient
    Services --> MessageProducer
    
    RepositoryAdapter -->|SQL/ORM Queries| Database
    APIClient -->|HTTP/REST Calls| ExternalAPI
    MessageProducer -->|Publish Message| MessageQueue
``` 